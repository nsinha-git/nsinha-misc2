1. given src,dest, undirected graph where edge weights means flow volume
2. at any time find all routes from src,dest  and for the each route find the max sustainable
flow which is min of the edge link in that route!If no routes exist escape to 5.
3. Choose the max path and mark(decrement) the links used in the path to the usage levels by this path.
4. Delete the edges that are full. Get a new Gcur and goto 2.
5. The accumulated paths sum decide the max flow.
===========
Prove the above greedy algorithm is actually wrong and will not find the optimal soln in all cases?

===========
A unproved but conjectured to be correct algorithm
1. given src,dest, undirected graph where edge weights means flow volume
2. at any time find all routes from src,dest  and for the each route find the max sustainable
flow which is min of the edge link in that route!If no routes exist escape to 5.
3. Choose the min path and mark(decrement) the links used in the path to the usage levels by this path.
4. Delete the edges that are full. Get a new Gcur and goto 2.
5. The accumulated paths sum decide the max flow.
==============
A proved but bad runtime algo
1. given src,dest, undirected graph where edge weights means flow volume
2. at any time find all routes from src,dest  and for the each route find the max sustainable
flow which is min of the edge link in that route$If no routes exist escape to 5.
3. Call each of k routes find such a r1 ... rk
4. Create a graph from PV of each of memeber of this set.  The graph contains all rks as nodes.
5. Two ri are joined if they share a link.
6. Decompose the graph into FCC
7.From each FCC select a single highest ri always including PV ri.
8. We get result sets for each PV.
9. Select the best PV.

