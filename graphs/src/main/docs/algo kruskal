A note: Both Kruskal and Prim are greedy algorithms that work on certain properties of particular graphs. They cant
be used to find MST on a general graph. As an argument, the first step of kruskal starts with a random edge (lowest
cost) and that itself can fragment a graph in unconnected components.Similar with a Prims case where a random node is
choosen and  edges incidnt or precedent with that nodes are considered. But selecting that random edge can have
implications as we saw! But the algo works as axiomated when the graph is fully connected.

1.
    1. The algo picks repetedly one edge of E such that two disjoint graphs becomes joined. The step finishes when no more
disjoint graphs remain.
    2. The least edge of remaining is always picked.
    3. The assumption is graph is  connected.

2. 1. The complexity comes from  sorting E (n^2logn) for first time into sorted queue.
   2. Then removing inapplicable edges.
   3. Then picking top of queue of what remains.

3. Let's use a 2 ques to implement the 2.
   It means go through the 1st queue and add it to 2nd queue only if the edges are not filtered by 3.2.
   This is o(E) for each edge picked.
   Total cost  becomes:O(2*E^2logE + E*n)≈ O(4n^2log(n)+ n^3)

   can we do better than n^3 in second term.

4. Can we maintain a n queues one for each node in sorted state. We pick the least of given ques at any stage. When we
remove a node by adding to a iterative result graph we can simply remove edges to that node from all ques whose node are
in abuilding graph. This is no better than 3 as we have to visit order of all ques and and do the removal.

5. I did analysis somewhere else so using deux ex machina i will say:
    0. If we use a max/min tree to represent the  queue of edges, we can do better: lets see:
    1. We start with an empty in-making Gm and create a max tree of all the edges.The queue is E elements so heap is height logE by balanced property of a heap.
    2. If cardinality of Gm < m , we choose the top edge of heap.
    3. We update the weight of edge to limit that will be o(logE) in cost.
    4. We update the weight of all the edges that comes to the newly added node (by property that the additional edge
     That was just added brings in a new node) from the in-making graph. The in  comimg edges is kept as
      part of augmented node. This is o(n) as there can be at max n -edges to a node.
    5. For each of these edges the weight is updated to limit to remove them from consideration.
    6. We get nlogn from 5.
    7. Total us (n+1)logn.
    8. We go back to 2 till we done
    9. Total spent O(n^2+n)logn
    So we did improve second term from n^3 to n^2logn getting O(5n^2logn)

6. Can we do better or prove otherwise. Using Heap on heap e can reduce the second term to nlogn. so overall we can end up
O(4n^2*logn + nlogn) ≈ O(4n^2*logn) an improvement over o(5n^2logn)


7. Some invariants on current faulty algorith(you will not know waht was this about a i quickly do away with the problem areas)
  1. The above algorithm clearly does not protect against the disconnected graphs even though the underlying graph is connected.
  2. There can be cycles.
  Let's prove these:
  P1: Cycles may result:
    1. Consider the   resulting intermediate graph after kth stepz which is not last step and graph has no cycles.
    2. There is always a node that has no incoming edges. This is proved by simple counting argument. At any step before
    the last step there are k-1 edges and k nodes as as by 1 we dont have cycles.
    3. If The least edge added at the current step does not add any node then we add a cycle.
    4.QED
  P2: Only one cycle may exist in single connected component.
    1. Use P1 with the argument that, after a cycle is drawn in a connected component, all incoming edges to that
    connecting component has been exhausted.
  P3. There may exist disconnected componenets.
    1. Let's we have choosen n-2 edges adn graph  still remains disconnected into two components.
    2. The next step results in cycle in c1. The last step results in cycle in c2.
    3. We are done.
  P4. A disconnected graph will always have two cycles distributed in atleast two components.



8. 1. To solve the symptomatic cases of 7, we need to ensure no cycles ever result.
   2. At every iteration we need to make sure that the edge we add does not result in cycles.
   3. When removing an edge and the edge group, we need to first test edge for creating a cycle and remove it from
    the edge group if that happens. The test assuming is π, the removing the edge from group in a heap is o(logn). Reading
    the group back to heap is o(logn). We at worst case do it n times. so total is n(π + 2* o(logn)). We can always perform a cycle check
    for common ancestor src and dest. so π turns out to be 2*o(logn) for gathering the ancestors and set intersection wihich is another o(logn)
   4. The total complexity of second step now becomes o(β*n^2logn).  β is constant >= 5
   5. Total complexity is o(5n^2logn)












