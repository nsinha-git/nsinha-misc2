1. We  call A , B  etc as linear span sets like (l,m) where l,m are on y axis and l < m. The sets are inclusive the endpoints.
2. A and B can be connected if they intersect
3. We can have a graph G of such sets and edges as per 2.

P1. If span sets are categorized into independent sets then problem is resolved into subslolutions of ISets and assigining
the value of solution as max(Isets)

P2. Inside a ISet element, if there are 2 elements A and B, then:
    case 1: B ⊆ A.
        h(A) > h(B)
    case 2: B⋂A ≠∅ ^ A ⊄ B  ^ B⊄A
        No sol possible

P3. Conisder another element C along with P2.
    case 1> C ⊆ A, C ⊆ B
        h(A) > h(B) > h(C)
    case 2> C ⊆ A, C ⋂ B = ∅
        h(A) > h(B) ⊥ h(C)
        h(A) > h(C)
        h(B) ⊥ h(C)

P4. Let {A1,A2,...An} be in a ISet non-degenerate.
    There must exist Ak that has an edge to each of the rest of Ai's for a viable sol
    Proof: As ISet is not degenerate there is a connection from each node to another node.
    Take any Ai,Aj. They can be partial intesection in which case no sol exist.
    In case Ai ⊆ Aj We can forget-list about Ai and only consider Aj. Similar will be case for reverse containment.
    Consider Aj with Ak after taking care of forget list.
    We can either land up in sol case or each time get a higher containment and adding one more to orget list.
    This process is exhaustibel in n -steps at the end of which we get Ak=Amax


Algo:
1. Given a1,...a2n with n colors and 2 nodes for each color.
2. Create span nodes numbering n with 2 nodes from 1. Lets call the A1,A2,...An. o(n)
3. Create a graph G with nodes from 2. An edge exists between node if they intersect.
 o(n^2) is obvious but let's see if we can do better.
 Lets each node has (l,r)
 1.Sort nodes on increasing l.o(nlogn)
 2.visit nodes from dec to inc.O(n)
 3.At any point of visit maintain a pQue based on r of nodes. Seeing l of curNode, remove all nodes that's r < l of curNode.
 Remaining all are in the connection list of the curNode.

 Step 3. A node can be added to pQue once and removed once. So the total complexity of step 3 is only o(2n)

 Thus this is doeable in o(nlogn)
 Set Gcur = G

4. Find independent sets in GCur. O(n^2)

5.Let they be C1,C2,...Ck

6.Verify existence of for solution of C1,C2, ....( a mixed bfs step)

7  k ≠ 1 For each Ci
    1. Find and remove maximal AmaxCi as per P4.(o(n))
    2. The residual graph is GCur = Gres. Goto 4.
    3. Set the height of Ci as  height from 2 + 1

8. The height of G is max height(C1,C2,..,Ck)


Complexity =
Fixed complexity of creating initial graph =o(nlogn)

S(n) = o(n^2) + ∑S(Ci)
We can show that:
k-1
∑S(Ci) <= S(n-1)
0
So S(n) < o(n^3).



// a twist when more than two directions are available to create height
Algo given without proof.proofs follow

We use 2 type of Graphs.
GT1 is graph of indpendent sets of span nodes.
GT2 is graph of (span nodes, with dirs)

A Gt2 can be broken into Gt1: Sum(Gt1)

A Gt1 can be be broken into Gt2: List(Node, Gt2)]

Dirs from Gt2 get replcated on each of elemnets Gt1.

Dirs is a axis number.
when we break Gt1 and find overlapping sets, we remove overlaps by assiging one of dirs to a max-node if multiple max-nodes found. For one max-node
case the dirs'=dirs.


A node in Gt2 can be present in multiple evals so there can be multiple parent(atmost 2 see proof).

When breaking a Gt1,

The flow is like this:
eval(max-node(null, dirs=2) , eval(Gt2(dirs))
eval(Gt1(nodes, dirs))      eval(Gt1(nodes, dirs)  ... eval(Gt1)
eval[(max-node(dirsEva), eval(Gt2'(dirsEva)]  etc





The base cases:
1. Eval(Gt2,dirs(0,1):
size Gt2 =1  and return [(1,0), (0,1)]

2. Eval(Gt2,dirs(0):
size Gt2 =1  and return [(1,0)]

3. Eval(Gt2,dirs(0,1):
size Gt2 =1  and return [(0,1)]

4. Eval(Gt2,dirs():
return failure


5.eval (max-node(dirs), eval(Gt2(dirs))
   case 1: if dirs = (0) then if (a,b)= eval(Gt2(dirs)) return (a+1,b)
   case 2: if dirs = (1) then if (a,b)= eval(Gt2(dirs)) return (a,b +1)
   case 3: if dirs = (0, 1) then if (a,b)= eval(Gt2(dirs)) if(b<a) return (a,b +1) if(b>a) return (a+1,b) if(a==b) return [(a+1,b), (a,b+1)]
6.eval [(max-node(dirs), eval(Gt2'(dirs))] We can get two lists which themselves have at most 2 evals.
    lets say: l1 = (a11,b11), (a12,b12)
    l2 = (a21,b21), (a22,b22)
    case 1: dirs =(0,1). In this case l2 must be nil.
            if (l1.size ==1) choose the one element
            else if (l1.size == 0) set fail
            else if (l1.size == 2) choose both the sols.
    case 2: dirs = (0) for l1 and dirs = (1) for l2
        let F((a,b)) = max(a,b)
        L1Sol = min F on l1
        L2Sol = min F on l2
        choose (max(L1(a),L2(a)), max(L1(b),L2(b)
        let (Asol, BSol)  be a solution

7. DirsEva: maxnode1 can get 0
    all entries in CC of maxnode1 can have (0,1) but those that intesect with maxnode2
    all entries in CC of maxnode2 can have (0,1) but those that intesect with maxnode1


------------------------------
Even a more simpler solution:

1. Create a Hyper Graph with 2 type of edges Intersect and Contained.

2. In G1 two span nodes are connected if they have a intersection.

3. In G2 two nodes have a directed connection if A contains B. A then contains B as a child

4. First traverse G1 channels. Find CCs. For one node CC put a value of 0 for color. Visit other CC. Color the parent(choose any) 1 and its
 bfs kids 2. Bfs of 2 colored kids are colored 1 if they are 0. If any kid is colored not zero in visit and the parent is same color, there is a failure.

5. After 4 we have all nodes colored 0,1,2

6. Now process the G2 channels. Do a dfs from arbitrary node.
    1. if no child node and color =0 : assign (0,1) and (1,0) as value for the node
    2. if no child node and color =1 : assign (1,0)
    3. if no child node and color =2 : assign (0,1)
    4. if childlren and color = 0: max(min on X) for all children. This X is going to be used for finding Y. Condition on this X and find children
    that qualify. Find max(min on Y) . this gives =(X1,Y1)
    do it other way too: this gives (X2,y2) if max(x1,y1) > maxof(x2,y2). drop the max one. else keep one with min other value.
    Lets call the prefinal res: (x,y)
    if x==y finalresult (x+1,x) and (x,x+1)
    else increase the lower one by one.
    This step the absolute minium for cur node given the chid nodes state
    5. if children and col=1:
    Do as in 4. but final result will be done like this:
    if (x ==y) from children then (x+1,x) else
    finalresult (x+1,y). Minimum step from this node given child
    6. if childeen and col=2
    do as in 5.
proof: Given minimum step from node given it's child is absolute minimum that can achieved. The proof is by induction on children.
So we achieve the minimum height

