1. We can represent the sum of each rows as rSum1 , rSum2 , ... rSumN
2. Let's assume r1 ,r2 .. depict actual mines in those rows.
3. For every row we can write a constaint based on row that comes before and after it:
    so for row k:
        2*rowk + 3*rowk-1 3*rowk+1 >= rSumK
        also 2*rowk <= rsumK
            3*rowk-1 <= rsumK
            3*rowk +1 <= rsumK
    So we have 3*N such constraints.

4. We can start from that rowi which is most bound. See P1.

We can try each combination and split the problem like this:
            rowi
       (op1)                    (op2) (op3) ...
     [Config1, config2,....]    [..]   [...]

Let's say config = config1, when we are config we have fully populated rowi.

We can now change the values of blocks in each of blocks given Config  in only one way.

We will have two rows affected the i-1 and i+1

We can constrain i-2,i-1,i+1,i+2 further.

We can repeat 4 with that new contsraint greedily.
We also note that given rowk config the problem is now two independent subproblems:
rowi to up and rowi to Down.
We can now solve these independently and if both subproblems can be solved we have a solution.


Note: We can use one  bias. In first turn we should only use middle row and not most constarined row since we want to maximize that flow and
go down one value each time.

We can use dynamic programming to optimize:
we can represent a subproblem key as (num row + string Rep of "neighborFills" + ordered list of (row no,colno) for each mine already discovered

That's it!
Analysis: Exponential.




P1. A row would be bounded in a continous integral interval closed on both sides. Initially they all start as [0, Inf]



P2. Can we suggest a better than exponential:

What about a max flow interpretation. Let's think a moment on that.

1. Create 9 Surrounding shells around each block. For each block the stch can inject flow in quantum of 9 units.
2. The surrounding shells have a path to one similar type shell from neighboring blocks.
3. In case of boundary shells we can assume to be having a  infinite sink, that always satisfies the flow(more later)
4. There is a destination node per block on which each of these shells belong to block and associated shells from nieghbors drain, each with a
 flow of 1.The destination node has a egress to dest with parametrs in initial setup.
5. Can we run a max flow on this.

Some issues:
1.

