package com.nsinha.problems.GoogleJam.ZeroEight.WorldFinal

import com.nsinha.common.{Block, Coordinate, Edge, Grid}
import org.scalatest.FunSuite

import scala.collection.mutable

/** Created by nsinha on 3/10/17.
  */

sealed trait GridValue
object Filled extends GridValue
object Blank extends GridValue
object CanChange extends GridValue

object Implicts {
  implicit val orderingOnIntBlock : Ordering[(Int, Block)] = {
    new Ordering[(Int, Block)] {
      override def compare(x : (Int, Block), y : (Int, Block)) : Int = {
        val res = implicitly[Ordering[Int]].compare(x._1, y._1)
        -res
      }
    }
  }
}

class ProblemE(rows : Int, cols : Int, inputs : String) {
  import Implicts._
  val grid = new Grid(rows, cols)
  val gridValues = mutable.Map[Block, GridValue]()
  val allEdgesMap = grid.edges
  val canChangeBlocks = mutable.MutableList[Block]()
  val edgeToFlow = mutable.Map[Edge, Int] ()
  var zeroEdges = mutable.Map[Edge, Int] ()
  val flowBlockToTDashSet = mutable.TreeSet[(Int, Block)] ()
  val blockToFlowToTDashMap : mutable.Map[Block, Int] = mutable.HashMap[Block, Int]()
  var flow = 0
  processInput

  def findMaxFlow : Int = {
    findFlowAssumingEveryCanChangeBlockIsFilled
    findMaxFlowtoTDash
    flow
  }

  def processInput = {
    var curRow = 0
    val inps = inputs.split("\n").toList
    inps map {
      str ⇒
        Range(0, cols) map {
          curCol ⇒
            val gridValue = getGridValue(str(curCol))
            val curBlock = grid.blocks(Coordinate(curRow, curCol))
            gridValues += (curBlock → gridValue)
            if (gridValue == CanChange) {
              canChangeBlocks += curBlock
            }
        }
        curRow = curRow + 1
    }
  }

  private def getGridValue(c : Char) : GridValue = {
    c match {
      case '#' ⇒ Filled
      case '.' ⇒ Blank
      case '?' ⇒ CanChange
    }
  }

  /* also  create connections to t` from any double crossed edge as encountered

   */
  private def findFlowAssumingEveryCanChangeBlockIsFilled : Int = {
    for ((blk, gridValue) ← gridValues) {
      if (gridValue == Filled || gridValue == CanChange) {
        val allEdgesForBlk = grid.getAllSurroundingEdgesForBlock(blk)
        allEdgesForBlk foreach { edge ⇒
          if (edgeToFlow.contains(edge)) {
            edgeToFlow += (edge → 0)
            flow = flow - 1
          }
          else {
            edgeToFlow += (edge → 1)
            flow += 1
          }
        }
      }
    }
    zeroEdges = edgeToFlow filter (_._2 == 0)
    flow
  }

  private def convertZeroEdgesToBlocks(edgeMap : Map[Edge, Int]) : mutable.Map[Block, Int] = {
    for ((edge, value) ← edgeMap) {
      val blocksForEdge = grid.getAllSurroundingBlocksForEdge(edge) //at max 2
      blocksForEdge foreach { blk ⇒
        if (gridValues(blk) == CanChange) {
          if (blockToFlowToTDashMap.contains(blk)) {
            blockToFlowToTDashMap += blk → (blockToFlowToTDashMap(blk) + 1)
          }
          else {
            blockToFlowToTDashMap += blk → 1
          }
        }
      }
    }

    blockToFlowToTDashMap foreach {
      x ⇒
        flowBlockToTDashSet += (x._2 → x._1)
    }

    blockToFlowToTDashMap

  }

  private def findMaxFlowtoTDash = {
    convertZeroEdgesToBlocks(zeroEdges.toMap)

    //we  need to keep digging blockToFlowToTDashSet  and find blcoks that are more than equal to  >=3
    //we can stop then. The proof is shown in doc
    var cond = true
    while (cond & flowBlockToTDashSet.nonEmpty) {
      val badBlock = flowBlockToTDashSet.head

      if (badBlock._1 < 3) {
        cond = false
      }
      else {
        flowBlockToTDashSet.remove(badBlock)
        blockToFlowToTDashMap.remove(badBlock._2)
        val allEdges = grid.getAllSurroundingEdgesForBlock(badBlock._2)
        val neighboringBlocks = allEdges.foldLeft(List[Block]()) {
          (Z, el) ⇒
            Z ++ { grid.getAllSurroundingBlocksForEdge(el) }.toSet.diff(Set[Block](badBlock._2)).toList
        }
        neighboringBlocks foreach { nBlk ⇒
          flow = flow + 1
          if (blockToFlowToTDashMap.contains(nBlk)) {
            val oldFlow = blockToFlowToTDashMap(nBlk)
            flowBlockToTDashSet.remove((oldFlow, nBlk))
            blockToFlowToTDashMap.remove(nBlk)
            val newFlow = oldFlow - 1
            if (newFlow > 0) {
              blockToFlowToTDashMap += nBlk → newFlow
              flowBlockToTDashSet += (newFlow → nBlk)
            }
          }
        }
      }
    }
  }
}

class Testing extends FunSuite {

  test("a") {
    val prob = new ProblemE(3, 3,
      """.?.
        |.?.
        |.#.""".stripMargin)
    println(s"flow: ${prob.findMaxFlow}")
  }
  test("b") {
    val prob = new ProblemE(5, 8,
      """.#...##.
        |.##..?..
        |.###.#.#
        |??#..?..
        |###?#...""".stripMargin)
    println(s"flow: ${prob.findMaxFlow}")
  }

  test("c") {
    val prob = new ProblemE(50, 50,
      """#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?
        |#?.#??????.#.???????????????.#.????????#.?????????
        |????.#????????.#?????????????????????#.??????????#
        |#?????.#??????#.????????#????.#????#.?????????????
        |????????.#??????????????#????#.??#.??????????????#
        |#???????????????????????#?????????????????????????
        |??.#????????????????????#?????????##?????????????#
        |#?.#??#.#???????????????#?????????..?????????#..??
        |??#.??#.#???????????????#?????????##?????????.#??#
        |#?#.????????????????????#???.????????????????#.???
        |????????????????????????#???#????????????????????#
        |#?????????????????????????????????????????????????
        |????????????#???????????????????????#????????????#
        |#???????????.#?????????????????????#.?????????????
        |????????????#.?????????????????????.#????????????#
        |#?????????????????????????????????????????????????
        |????#?????????????????????.????????????????????#?#
        |#???.????????????????????????????????????#.???????
        |????#???#????????????????????????????????.#??????#
        |#???????.????????????##.??????????????????????????
        |????????#?#???????????.##????????????????????????#
        |#?????????.???#?????????.#.???????????????????????
        |???????????????????????????????????????????????.?#
        |#?????????????????????????????????????????????????
        |???????????????????#.????????????????????????????#
        |#??.#?????.#???????#.?????????.#.??????.#?????????
        |???.#?????.#??????????????????#.#??????#.?????#??#
        |#?????????????????????????????????????????????.???
        |?????????????????????????????????????????????????#
        |#?????...????????#????????????????????????????????
        |??????###????????.???????????????????????????????#
        |#????????????????#????????????????#####.####.##.##
        |?????????????????#????????????????????????????????
        |#????????#.??????#???????????????????????????????#
        |?????????##??????.????????????????????????????????
        |#????????????????????????????????????????????????#
        |?????????????????????????????##???????????????????
        |#????????????????????????????..??????????????????#
        |??????????????????????????????????????????????????
        |#????????????????????????????????????????????????#
        |??????????????????????????????????????????????????
        |#??????????????##????????????????????????????????#
        |???????????????..?????????????????????????????????
        |#??????????????????????????????????????????#?????#
        |??????????????????????????????????????????.#??????
        |#???.#???????????????????????????????????###?????#
        |????????????????????????##????????????????????????
        |#???????????????????????.#???????????????????????#
        |???????#.??????????????????????????#.?????????????
        |#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?## """.stripMargin)

    println(s"flow: ${prob.findMaxFlow}")
  }

  test("d") {
    val prob = new ProblemE(49, 49,
      """.......?.??..?.?.....#??.?.??.....??...?#....?...
        |......#.??....??.?#?.#?...##..?.....?....?.?..?..
        |?..?...?...........?.#..........??...?.?.....#.?#
        |.....?.#...?.??...?..#....??..?...??..#?......?.?
        |??.?.?.#.....??.??..#.?..?.??????.?..??..........
        |.?.??..?#.?....?.#..?.#....#?.......?.......??..#
        |#.?....??.?.#?#.....?#...#..#.....?#..#..????#...
        |..?......?.#.....?#.#.?#.....?....?..#..?..?.....
        |...?#..??##?.......?..?.....#.?.....?..?..??...?.
        |#?.??...#????.#.....?.?....?.........?..?..#?..#?
        |?....??..??..........?......?..?.?.??.#..#???.#.?
        |.....??...#???.?.##...?..?..#..??......#........?
        |.....??.........?.?..#??.?.?...???..#...??#...?..
        |??.....?........?...??.???.??..?..#.?.?.....?..?.
        |?.#..?.....??.............#?.?.......?.....?.?...
        |.#??.?.?.....#....#.?.#...?#...??.?..#.?...?.#.?.
        |......?....?..#..?....#?#?....?...??.?.#.?.?....#
        |?..?..#...?........#....?.#.....??.....#?..#.??.#
        |..???.?.???......#.#?.#.....#.......?..?...#?#..#
        |......##...?.?.?..????.?..?...?.??..??...?..?...?
        |..?.?.?.?.#..??.?..?........?...#..?...#.?..?.#?#
        |....#?.....#.##??.....#.?...?...##..?.##?...?..?.
        |...?.??.......?....#.?.?..??...#.?.?.#....#..#...
        |?..?...?...#....?..#.....?...?#.....?...#..???.?.
        |?....?..???.?#?......?......?...?..............??
        |?..?#...?...#.....#...??...?#.??#.?...?.?..??...?
        |.#....???.#..#..#????.?.??............?..?..##..?
        |.#?.?.#?...?.?...#.#?..?.??.........?......?...??
        |.?....?...#....?#.......?.?.?...?#........#.....?
        |....?#..??.?..?........?...?..#??..?.............
        |?.........#..#.?...??...?.........?.?.....??..?..
        |..#........#??..?#...??.??#.?....?...?.?#?##.....
        |.##.#..?#?..?#...#.#..........?..?..??.??#.?.?...
        |..??......??..#?#.?#?.??.?...#.?..???......##.?##
        |?##...#....?...?...?.......##..??...??.........?#
        |.?..##......?........#.....?#.?.....?.#...#...?..
        |.#...?.?.#..#.#?..?#?..?.?...#..#?.???????.#?.#..
        |?......??.?.##.#..?..?.....?....#...?.....?....?.
        |....#??..?.?...?..?.?.?....#?.....?..?.?.??....??
        |..?#....??....#..??#.??.?..........#.#?.#?.?#.#..
        |?..?.???#.?....?......?..?..##.?..?..?....?.?....
        |..?...##?..##.?......#.?#.?...?..?.?..#.....?...?
        |.#..?#..#.#.....?.?...??.??...#...#....?.....???.
        |?...#?#.?....#.#.???.........?..?.?....#.#...?..?
        |..#..?...??...............?...?.?#?.?.?..?....?..
        |.??......?.??..#..#?....?.?..?#.#.....?#..?.?...#
        |?#...?..??.......??#?...#..??.#???...?.??.#......
        |...?...??.?.....##.#.#.#.......?#??..#.#.........
        |....?.......?..?....?.?.....#.#.?????.##.........""".stripMargin)

    println(s"flow: ${prob.findMaxFlow}")
  }
}
